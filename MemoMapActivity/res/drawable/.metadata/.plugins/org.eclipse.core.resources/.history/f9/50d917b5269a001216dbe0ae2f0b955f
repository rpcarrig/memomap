/**
 * 
 */

package com.rpcarrig.memomapa;

import java.util.ArrayList;

import android.app.Activity;
import android.app.Fragment;
import android.app.ListFragment;
import android.content.ComponentName;
import android.content.Intent;
import android.content.ServiceConnection;
import android.content.SharedPreferences;
import android.location.Location;
import android.location.LocationListener;
import android.location.LocationManager;
import android.os.Bundle;
import android.os.IBinder;
import android.preference.PreferenceFragment;
import android.preference.PreferenceManager;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.CheckBox;
import android.widget.SeekBar;
import android.widget.TextView;

import com.google.android.gms.maps.CameraUpdateFactory;
import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.GoogleMapOptions;
import com.google.android.gms.maps.MapFragment;
import com.google.android.gms.maps.model.Circle;
import com.google.android.gms.maps.model.CircleOptions;
import com.google.android.gms.maps.model.LatLng;
import com.google.android.gms.maps.model.Marker;
import com.google.android.gms.maps.model.MarkerOptions;
import com.rpcarrig.memomapa.MemoMapService.GpsBinder;

public class MemoMapActivity extends Activity implements LocationListener {
	private static final String TAG = "MemoMapActivity";
	private static final long MIN_DISTANCE_CHANGE	 = 10,
							  MIN_MS_BETWEEN_UPDATES = 1000 * 10 * 1;
	
	private static LatLng latLongLocation;
	private static GoogleMap googleMap;
	private static Location lastLocation,
							location;
	private MapFragment mapFragment;
	private Fragments.MemoList memoListFragment;
	private LocationManager locationManager = null;
	private Memo tempMemo = new Memo();
	private MemoMapService memoMapService;
	private SharedPreferences sharedPreferences;

	boolean gpsBound         = false,
			canGetLocation	 = false,
			isGpsEnabled	 = false,
			isNetworkEnabled = false;
	Double latitude,
		   longitude;
	static OnItemClickListener itemClick = new OnItemClickListener(){
		@Override
		public void onItemClick(AdapterView<?> arg0, View arg1,
				int arg2, long arg3) {
			viewMemoOnMap(arg3);
		}
	};
	Runnable drawMemoMarkers = new Runnable(){
		public void run(){
			
			for(Memo m : DataHandler.getInstance(MemoMap
					.getInstance()).getAllMemos()){
				Circle circ = googleMap.addCircle(new CircleOptions()
					.center(m.getLatLong())
					.fillColor(0x25AA0000)
					.strokeColor(0xFFAA0000)
					.strokeWidth(2)
					.radius(m.getRadius()));
				m.setCircle(circ);
				
				Marker mark = googleMap.addMarker(new MarkerOptions()
					.position(m.getLatLong())
					.snippet(m.getLocationName())
					.title(m.getMemoBody()));
				m.setMarker(mark);
			}
		}
	};
	
	ServiceConnection serviceConnection = new ServiceConnection(){
		@Override
		public void onServiceConnected(ComponentName name,
				IBinder service){
			Log.d(TAG, "ServiceConnection: " + name);
			GpsBinder binder = (GpsBinder)service;
			memoMapService = binder.getService();
			gpsBound = true;
		}

		@Override
		public void onServiceDisconnected(ComponentName name) {
			Log.d(TAG, "ServiceConnection: onServiceDisconnected");
			gpsBound = false;
		}
	};
	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		Log.d(TAG, "onCreate");
		super.onCreate(savedInstanceState);
		overridePendingTransition(android.R.anim.fade_in, android.R.anim.fade_out);
		setContentView(R.layout.activity_memomap);

		//Intent gpsIntent = new Intent(this, MemoMapService.class);
		//bindService(gpsIntent, serviceConnection, Context.BIND_AUTO_CREATE);
		
		sharedPreferences = PreferenceManager.getDefaultSharedPreferences(MemoMap.getInstance());

		int mapType = Integer.parseInt(sharedPreferences.getString("prefMapType", "2"));
		GoogleMapOptions mapOptions = new GoogleMapOptions().mapType(mapType);
		mapFragment = Fragments.Map.newInstance(new GoogleMapOptions().mapType(mapType));
		
		getFragmentManager().beginTransaction()
				.add(R.id.fragment_topcontainer, mapFragment, "map")
				.commit();
		
		startGps();
			
		memoListFragment = new Fragments.MemoList();
		double[] coords = {location.getLatitude(), location.getLongitude()};
		Bundle bundle = new Bundle();
		bundle.putDoubleArray("location", coords);
		memoListFragment.setArguments(bundle);
		
		getFragmentManager().beginTransaction()
			.replace(R.id.fragment_bottomcontainer, memoListFragment, "memoList")
			.commit();
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		Log.d(TAG, "onCreateOptionsMenu");
		getMenuInflater().inflate(R.menu.activity_memomap, menu);
		return true;
	}
	
	@Override
	public void onDestroy(){
		Log.d(TAG, "onDestroy");
		super.onDestroy();
		//if(gpsBound) unbindService(serviceConnection);
	}
	
	@Override
	public void onLocationChanged(Location location) {
		Log.d(TAG, "onLocationChanged");
		if (locationManager != null){
			location = locationManager.getLastKnownLocation(LocationManager.NETWORK_PROVIDER);
			if(location != null){
				latitude = location.getLatitude();
				longitude = location.getLongitude();
			}
		}
	}
	
	@Override
	public boolean onOptionsItemSelected( MenuItem item ){
		Log.d(TAG, "onOptionsItemSelected");
	    switch(item.getItemId()){
	    	case R.id.menu_resetview:  resetView();
	    							   return true;
		    case R.id.menu_creatememo: createMemo();
		    						   return true;
		    case R.id.menu_settings:   showSettings();
		    						   return true;
	    	default: return super.onOptionsItemSelected(item);
	    }
	}
	
	@Override
	public void onPause(){
		Log.d(TAG, "onPause");
		super.onPause();
	}

	@Override
	public void onProviderDisabled(String provider) { }

	@Override
	public void onProviderEnabled(String provider) { }
	
	@Override
	public void onResume(){	
		Log.d(TAG, "onResume"); 
		super.onResume();
	}
	
	@Override
	public void onStart(){ 
		Log.d(TAG, "onStart");
		super.onStart();
		
		googleMap = ((MapFragment)getFragmentManager().findFragmentByTag("map")).getMap();
		googleMap.setMyLocationEnabled(true);
		
		resetView();
		new Thread(drawMemoMarkers).run();
	}
	
	@Override
	public void onStatusChanged(String provider, int status, Bundle extras) {}
	
	/**
	 * 
	 */
	
	private void createMemo(){
		Intent createMemo = new Intent(MemoMapActivity.this, CreateMemoActivity.class);
		Bundle bundle = new Bundle();
		location = getFreshLocation();
		bundle.putDouble("lat", location.getLatitude());
		bundle.putDouble("lon", location.getLongitude());
		createMemo.putExtras(bundle);
		
		startActivity(createMemo);
	}
	
	public Location getFreshLocation(){
		lastLocation = location;
		
		Log.d(TAG, "geoLocation");
		if( !isGpsEnabled && !isNetworkEnabled){
			//no GPS or network
			Log.e(CONNECTIVITY_SERVICE, "no GPS or network");
		}
		else{
			this.canGetLocation = true;
			
			// If the network provider is available, get its location first.
			if(isNetworkEnabled){
				Log.d("geoLocation", "Network is enabled.");
				if (locationManager != null){
					location = locationManager.getLastKnownLocation(LocationManager.NETWORK_PROVIDER);
					if(location != null){
						latitude = location.getLatitude();
						longitude = location.getLongitude();
					}
				}
			}
			
			// If the GPS is also available, get coordinates using GPS services.
			if(isGpsEnabled){
				Log.d("geoLocation", "GPS is enabled.");
				if (locationManager != null){
					location = locationManager.getLastKnownLocation(LocationManager.GPS_PROVIDER);
					if(location != null){
						latitude = location.getLatitude();
						longitude = location.getLongitude();
					}
				}
			}
		}
		
		if(isBetterLocation(location, lastLocation)) return location;
		else return lastLocation;
	}
	
	private void resetView(){
		Log.d(TAG, "resetView");
		
		if(location != null){
			latLongLocation = new LatLng(
					location.getLatitude(), 
					location.getLongitude());
			googleMap.animateCamera(CameraUpdateFactory.newLatLngZoom(latLongLocation, 12));
		}
	}
	
	public void saveMemoClick(View view){
		CheckBox fave = (CheckBox)findViewById(R.id.checkbox);
		SeekBar seekBar = (SeekBar)findViewById(R.id.seekBar1);
		TextView text = (TextView)findViewById(R.id.newMemoLocation);
		if(text != null) tempMemo.setLocationName(text.getText().toString());
		else Log.d(TAG, "Can't find memo location.");
		if(fave != null) { boolean b = fave.isChecked(); }
		else Log.d(TAG, "Can't find fave box.");
		if(seekBar != null) { tempMemo.setRadius(seekBar.getProgress()); }
		tempMemo.setLatitude(location.getLatitude());
		tempMemo.setLongitude(location.getLongitude());
		
		DataHandler.getInstance(MemoMap.getInstance()).addMemo(tempMemo);
		
		Fragments.MemoList memoListFragment = new Fragments.MemoList();
		double[] coords = {location.getLatitude(), location.getLongitude()};
		Bundle bundle = new Bundle();
		bundle.putDoubleArray("location", coords);
		memoListFragment.setArguments(bundle);
		
		getFragmentManager().beginTransaction()
			.replace(R.id.fragment_bottomcontainer, memoListFragment, "memoList")
			.commit();
	}
	
	private void showSettings(){
    	Intent settingsIntent = new Intent(this, SettingsActivity.class);
    	startActivity(settingsIntent);
	}
	
	private void startGps() {
		try{
			locationManager	= (LocationManager)this.getSystemService(LOCATION_SERVICE);
			isGpsEnabled		= locationManager.isProviderEnabled(LocationManager.GPS_PROVIDER);
			isNetworkEnabled	= locationManager.isProviderEnabled(LocationManager.NETWORK_PROVIDER);
		
			locationManager.requestLocationUpdates(LocationManager.NETWORK_PROVIDER, MIN_MS_BETWEEN_UPDATES, MIN_DISTANCE_CHANGE, this);	

			location = getFreshLocation();
			latLongLocation = new LatLng(location.getLatitude(), location.getLongitude());
		}
		catch (Exception e){
			e.printStackTrace();
			Log.e(NOTIFICATION_SERVICE, "GPS Start error");
		}
	}
	
	private static void viewMemoOnMap(long id){
		Log.d(TAG, "viewMemo (id: " + id + ")");
		Memo m = DataHandler.getInstance(MemoMap.getInstance())
				.getAllClosestMemos(latLongLocation).get((int)id);
		
		Marker mar = m.getMarker();
				mar.showInfoWindow();
		
		if(m != null){
			googleMap.animateCamera(CameraUpdateFactory
				.newLatLngZoom(m.getLatLong(), 17));
			/**
			getFragmentManager().beginTransaction()
				.setCustomAnimations(
						R.animator.slide_in_fromright, R.animator.slide_out_toleft,
						R.animator.slide_in_fromleft, R.animator.slide_out_toright)
				.replace(R.id.fragment_bottomcontainer, new Fragments.OpenMemo())
				.addToBackStack(null)
				.commit();
			
			TextView memoBody = (TextView)findViewById(R.id.memobodytext),
					 memoLoc  = (TextView)findViewById(R.id.viewloctext),
					 memoLong = (TextView)findViewById(R.id.viewlong),
					 memoLat  = (TextView)findViewById(R.id.viewlat);
			memoBody.setText(m.getMemoBody());
			memoLoc.setText(m.getMemoTitle());
			memoLong.setText((new Double (m.getLongitude())).toString());
			memoLat.setText((new Double (m.getLatitude())).toString());	*/
		}
	}
	
	/**
	 * 
	 *
	 *
	 */	
	private static class Fragments {
		public static class Map extends MapFragment {
			public Map(){ }
		}
		
		public static class MemoList extends ListFragment {
			private final static String TAG = "MemoListFragment";
			
			ArrayList<Memo> memoArray;
			LatLng location;
			
			public MemoList(){ }

			@Override
			public void onCreate(Bundle savedInstanceState){
				super.onCreate(savedInstanceState);
				Bundle bundle = this.getArguments();
				if(bundle != null) {
					double d[] = bundle.getDoubleArray("location");
					Log.d(TAG, d[0] + " + " + d[1]);
					location = new LatLng(d[0], d[1]);
				}
			}
			
			@Override
			public View onCreateView(LayoutInflater inflater, ViewGroup container, 
					Bundle savedInstanceState) {
				Log.d(TAG, "onCreateView");
				
				return inflater.inflate(R.layout.fragment_viewmemolist, container,
						false);
			}
			
			@Override
			public void onResume(){
				Log.d(TAG, "onResume");
				
				if(getListView().isClickable()){
					getListView().setOnItemClickListener(itemClick);
				}
				super.onResume();
			}
			
			@Override
			public void onStart(){
				Log.d(TAG, "onStart");
				memoArray = DataHandler.getInstance(MemoMap.getInstance()).getAllClosestMemos(location);
				MemoAdapter memoAdapter = new MemoAdapter(MemoMap.getInstance(), 0,
						memoArray, location);	
				getListView().setAdapter(memoAdapter);
				super.onStart();
			}
		}
		
		public static class OpenMemo extends Fragment{
			final String CLASS = "OpenMemoFragment";
			public OpenMemo(){ }
			
			@Override 
			public View onCreateView(LayoutInflater inflater, ViewGroup container,
					Bundle savedInstanceState) {
				Log.d(CLASS, "onCreateView");
				return inflater.inflate(R.layout.dialog_viewmemo, container, false);
			}
		}
	}
	/** Determines whether one Location reading is better than the current Location fix
	  * @param location  The new Location that you want to evaluate
	  * @param currentBestLocation  The current Location fix, to which you want to compare the new one
	  */
	protected boolean isBetterLocation(Location location, Location currentBestLocation) {
		Log.d(TAG, "isBetterLocation");
		Log.d(TAG, "Comparing (" + location.getLongitude() + ", " + location.getLatitude() + ")");
		
		final int TWO_MINUTES = 1000 * 60 * 2;
	    if (currentBestLocation == null) {
	        // A new location is always better than no location
	        return true;
	    }
	    else Log.d(TAG, "With (" + currentBestLocation.getLongitude() + ", " + currentBestLocation.getLatitude() + ")");

	    // Check whether the new location fix is newer or older
	    long timeDelta = location.getTime() - currentBestLocation.getTime();
	    boolean isSignificantlyNewer = timeDelta > TWO_MINUTES;
	    boolean isSignificantlyOlder = timeDelta < -TWO_MINUTES;
	    boolean isNewer = timeDelta > 0;

	    // If it's been more than two minutes since the current location, use the new location
	    // because the user has likely moved
	    if (isSignificantlyNewer) {
	        return true;
	    // If the new location is more than two minutes older, it must be worse
	    } else if (isSignificantlyOlder) {
	        return false;
	    }

	    // Check whether the new location fix is more or less accurate
	    int accuracyDelta = (int) (location.getAccuracy() - currentBestLocation.getAccuracy());
	    boolean isLessAccurate = accuracyDelta > 0;
	    boolean isMoreAccurate = accuracyDelta < 0;
	    boolean isSignificantlyLessAccurate = accuracyDelta > 200;

	    // Check if the old and new location are from the same provider
	    boolean isFromSameProvider = isSameProvider(location.getProvider(),
	            currentBestLocation.getProvider());

	    // Determine location quality using a combination of timeliness and accuracy
	    if (isMoreAccurate) {
	        return true;
	    } else if (isNewer && !isLessAccurate) {
	        return true;
	    } else if (isNewer && !isSignificantlyLessAccurate && isFromSameProvider) {
	        return true;
	    }
	    return false;
	}

	/** Checks whether two providers are the same */
	private boolean isSameProvider(String provider1, String provider2) {
	    if (provider1 == null) {
	      return provider2 == null;
	    }
	    return provider1.equals(provider2);
	}
}
